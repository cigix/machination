#!/usr/bin/env python3

import json
import string
import sys

import mtoutput
import mtparser

def parsealphabet(arg):
    '''parsealphabet(arg): Read an alphabet

    Parameters:
      - arg: the given alphabet

    Return: str, the alphabet to use.

    If arg is "ASCII", return all the non-control characters of ASCII, otherwise
    return arg.
    '''
    if arg == "ASCII":
        alphabet = string.ascii_letters
        alphabet += string.digits
        alphabet += string.punctuation
        alphabet += ' '
    else:
        alphabet = arg
    return alphabet

def main(argv):
    '''main(argv): Entrypoint of the machination executable

    Parameters:
      - argv: list of str, the arguments to the program

    Return: int, the exit code of the program
    '''
    usagestr = f'''Usage: {argv[0]} [OPTIONS...] <FILE> <ALPHABET>

Parameters:
  FILE      A JSON file containing the Turing machine description
  ALPHABET  The set of symbols of the Turing machine. Can be one of:
              - ASCII: all the non-control characters of ASCII
              - any string of characters

Options:
  -c        Write the transition function as a C array into rules.h.
  -g        Print the transition function in a human readable format. This is
            the default behaviour.
  -m        Print the transition function in a mathematical formal format.

  -h, -help, --help  Print this help

Flatten out the rules of the Turing machine and print them, grouped by state.'''
    positionals = list()
    outputdriver = mtoutput.Human()
    for arg in argv[1:]:
        if arg[0] == '-':
            if arg in ("-h", "-help", "--help"):
                print(usagestr)
                return 0
            if arg == "-c":
                outputdriver = mtoutput.C()
            elif arg == "-g":
                outputdriver = mtoutput.Human()
            elif arg == "-m":
                outputdriver = mtoutput.Formal()
            else:
                print(f"Unknown option: {arg}. Use -h for help",
                      file=sys.stderr)
                return 1
        else:
            positionals.append(arg)

    if len(positionals) != 2:
        print(usagestr, file=sys.stderr)
        return 1

    with open(positionals[0]) as descfile:
        mtdesc = json.load(descfile)

    alphabet = parsealphabet(positionals[1])

    states = mtparser.parse(mtdesc, alphabet)

    print(outputdriver.formatmt(states))

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
